node {
    stage('Build') {
        docker.image('python:2-alpine').inside {
            sh 'python -m py_compile sources/add2vals.py sources/calc.py'
            stash(name: 'compiled-results', includes: 'sources/*.py*')
        }
    }
    
    stage('Test') {
        stage('Test') {
            try {
                docker.image('qnib/pytest').inside {
                    sh 'py.test --junit-xml test-reports/results.xml sources/test_calc.py'
                }
            } catch (e) {
                echo 'Failed'
                throw e
            } finally {
                junit 'test-reports/results.xml'
            }
        }
    }
    
    stage('Manual Approval') {
        input message: 'Lanjutkan ke tahap Deploy?'
    }
    
    stage('Deploy') {
        dir("${env.BUILD_ID}") {
            unstash(name: 'compiled-results')
            sh "ls ${env.WORKSPACE}/${env.BUILD_ID}"
            sh "echo ${env.WORKSPACE}/${env.BUILD_ID}/sources:/src"
            sh "docker run --rm -v ${env.WORKSPACE}/${env.BUILD_ID}/sources:/src cdrx/pyinstaller-linux:python2 'pyinstaller -F add2vals.py'"
        }
        sh "ls ${env.BUILD_ID}"
        archiveArtifacts "${env.BUILD_ID}/sources/dist/add2vals"
        sh "ls ${env.WORKSPACE}/${env.BUILD_ID}"
        sh "ls ${env.BUILD_ID}/sources"
        sh "docker run --rm -v ${env.WORKSPACE}/${env.BUILD_ID}/sources:/src cdrx/pyinstaller-linux:python2"
        sh "ls"
        sh "ls ${env.BUILD_ID}/sources"
        sshPublisher(
            publishers: [
                sshPublisherDesc(
                    configName: 'submission-cicd-pipeline-nafifurqon-ec2', 
                    transfers: [
                        sshTransfer(
                            cleanRemote: false,
                            excludes: '',
                            execCommand: "pwd && ls",
                            execTimeout: 120000,
                            flatten: false,
                            makeEmptyDirs: false,
                            noDefaultExcludes: false,
                            patternSeparator: '[, ]+',
                            remoteDirectory: '/home/ubuntu',
                            remoteDirectorySDF: false,
                            removePrefix: '',
                            sourceFiles: "${env.BUILD_ID}/sources/*"
                        )
                    ],
                    usePromotionTimestamp: false,
                    useWorkspaceInPromotion: false,
                    verbose: false
                )
            ]
        )
        sleep(60)
    }
}
